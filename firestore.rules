rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated.
    function isAuth() {
      return request.auth != null;
    }

    // Helper function to get the requesting user's data from the 'users' collection.
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // Helper function to check if the requesting user has the 'driver' role.
    function isDriver() {
      return isAuth() && getUserData().role == 'driver';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can read their own profile. For privacy, other profiles are not readable directly.
      // Your app should use a Cloud Function to expose public data (like name/avatar) when needed.
      allow read: if isAuth() && request.auth.uid == userId;

      // A user can only create or update their own profile.
      // We add validation to ensure data integrity.
      allow create, update: if isAuth() && request.auth.uid == userId &&
                              // Ensure required fields exist and have the correct type.
                              request.resource.data.email is string &&
                              request.resource.data.name is string &&
                              // Enforce that 'role' can only be 'user' or 'driver'.
                              request.resource.data.role in ['user', 'driver'];

      // Deleting users from the client is disabled.
      allow delete: if false;
    }

    // Rules for the 'rides' collection
    match /rides/{rideId} {
      // --- Helper Functions for Ride Context ---
      function existingData() { return resource.data; }
      function incomingData() { return request.resource.data; }
      function isRideOwner() { return isAuth() && request.auth.uid == existingData().user.id; }
      function isAssignedDriver() {
        return isDriver() && 'driver' in existingData() && existingData().driver != null && request.auth.uid == existingData().driver.id;
      }

      // --- Read and List Rules ---

      // A user can read a ride if they are the owner.
      // A driver can read any 'pending' ride or any ride they are assigned to.
      allow read: if isAuth() && (
                    isRideOwner() ||
                    (isDriver() && (existingData().status == 'pending' || isAssignedDriver()))
                  );

      // 'list' allows queries. The 'read' rule above will still be enforced on every
      // document returned by the query, ensuring users only see what they are allowed to.
      // For performance, client-side queries should be specific (e.g., filter by user.id or status).
      allow list: if isAuth();

      // --- Write Rules (Create, Update, Delete) ---

      // Any authenticated user can create a ride request for themselves.
      // We add strong validation for the initial ride data.
      allow create: if isAuth() &&
                      // The creator must be the user assigned to the ride.
                      request.auth.uid == incomingData().user.id &&
                      // Validate the initial state and data types.
                      incomingData().status == 'pending' &&
                      incomingData().pickup is string && incomingData().pickup.size() > 0 &&
                      incomingData().dropoff is string && incomingData().dropoff.size() > 0 &&
                      incomingData().dateTime is string &&
                      incomingData().fees is map &&
                      'base' in incomingData().fees && incomingData().fees.base >= 0 &&
                      // A user cannot assign a driver or add other fees on creation.
                      !('driver' in incomingData()) &&
                      incomingData().keys().hasOnly(['user', 'status', 'pickup', 'dropoff', 'dateTime', 'fees', 'isRoundTrip', 'returnTime', 'transportType', 'transportNumber', 'stops', 'tripLabel', 'createdAt', 'duration', 'direction', 'linkedTripId']);


      // Updates are complex. We only allow specific, valid state transitions.
      allow update: if isAuth() && (
        // Case 1: A driver accepts a pending ride.
        (
          isDriver() &&
          existingData().status == 'pending' &&
          incomingData().status == 'accepted' &&
          incomingData().driver.id == request.auth.uid
        ) ||

        // Case 2: The ride owner updates their own ride (e.g., reschedules).
        (
          isRideOwner() &&
          existingData().status in ['pending', 'accepted'] &&
          // A user can NEVER change the fees, status, or driver.
          incomingData().fees == existingData().fees &&
          incomingData().status == existingData().status &&
          incomingData().driver == existingData().driver
        ) ||

        // Case 3: The assigned driver updates the ride (e.g., adds a fee).
        (
          isAssignedDriver() &&
          existingData().status == 'accepted' &&
          // A driver cannot change the user who requested the ride.
          incomingData().user.id == existingData().user.id
        ) ||

        // Case 4: The ride owner or assigned driver cancels the ride.
        (
          (isRideOwner() || isAssignedDriver()) &&
          incomingData().status == 'cancelled' &&
          existingData().status != 'cancelled' // Prevent re-cancelling.
        ) ||

        // Case 5: The assigned driver completes the ride.
        (
          isAssignedDriver() &&
          incomingData().status == 'completed' &&
          existingData().status == 'accepted'
        )
      );

      // Deleting rides from the client is disabled.
      allow delete: if false;
    }

    // By default, deny all access to any other collections.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}